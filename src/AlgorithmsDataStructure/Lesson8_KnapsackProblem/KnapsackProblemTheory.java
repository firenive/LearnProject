package AlgorithmsDataStructure.Lesson8_KnapsackProblem;

public class KnapsackProblemTheory {
    // задача о рюкзаке. берем рюкзак, который вмещает 15 кг вещей. нужно на весь объем взять еду с макс. кол-во каллорий
    // любую еду можно делить на части

    // Входные данные:
    // Веса предметов w1, w2, ..., wn
    // Ценность каждого предмета (калории, цена и т.д.) v1, v2, ..., vn
    // Вместимость рюкзака W
    // Количество объектов n

    // Выходные данные:
    // Максимальное значение ценности, которое помещается в рюкзак с вместимостью W

    // Для решения задачи жадным алгоритмом, необходимо отсортировать вещи по их Удельной ценности (то есть по отношению
    // ценности предмета к его весу), и поместить в рюкзак предметы с наибольшей уделной ценностью. Если этот объект помещается
    // полностью в рюкзак - кладем объект в рюкзак. Если объект помещается в рюкзак не полностью, взять такую часть этого
    // объекта, которая заполнит рюкзак. Вернуть полученную общую ценность

    // Сложность алгоритма:
    // Сортировка удельных ценностей объектов - O(N * log(N))
    // Вычисление сколько объектов поместится в рюкзак - O(N)
    // Итоговая сложность - O(N * log(N)) + O(N) =  O(N * log(N))
}
