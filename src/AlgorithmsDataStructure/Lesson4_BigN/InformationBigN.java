package AlgorithmsDataStructure.Lesson4_BigN;

public class InformationBigN {
    // Правило использования O - ассимптотическая оценка сложности алгоритма

    // 1 правило: Константы игнорируются
    // 1 пример: 7n ^3 = O(n^3)
    // 2 пример: (n ^2) / 3 = O(n ^ 2)

    // 2 правило: В выражении мы учитываем только самую быстрорастущую функцию
    // 1 пример: n ^ 2 + n = O(n^2)
    // 2 пример: 2 ^ n + n ^ 9 = O(2^n)

    // 3 правило: Основание логарифма не пишется (так как они отличаются друг от друга на костанту
    // log2(n), log3(n), log10(n) все равляются O(log(n))

    // Константами игнорируются потому что нам важен лишь порядок роста. Несмотря на константы функции отображают
    // один и тот же порядок роста при увеличении аргумента. Точностью можно пожертвовать

    // недостатки использования O
    // 1) теряем информацию о константах (100x и x это одно и тоже)
    // 2) BigO - это только асимптотическая оценка (Мы не узнаем время выполнения алгоритма на конкретных аргументах,
    // мы узнаем, то как себя ведет алгоритм при очень больших аргументах

}
