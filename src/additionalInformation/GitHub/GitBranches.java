package additionalInformation.GitHub;

public class GitBranches {
    // https://youtu.be/Lf8arzsq__U
    // команда git branch отображает все активные ветки. Звездочкой обозначается текущая ветка
    // git branch --v показывает также последний коммит который был сделан в ветке

    // Создание новой ветки git branch "name branch". При создании ветки ее состояние будет таким же, как у ветки от
    // которой делается отвлетвение
    // переключение в другую ветку git checkout "name branch". При этом если например комитить в ветку develop то все изменения
    // сохранятся только для нее. Если мы переключимся обратно на ветку master то все изменения закоммиченные для ветки
    // develop пропадут

    // Команда git checkout -b "name branch" создает ветку и переходит в нее
    // Команда git branch -m "new name branch" переименовывает текущую ветку

    // Для того чтобы откатиться к определенному коммиту git checkout "Id commit"  например e668398
    // после этого можно создать новую ветку, которая отобразит ситуацию на момент выбранного коммита

    // Перед выполнением push необходимо сначала создать ветки отдельными командами на gitHub. Используем команду
    // git push --set-upstream origin "name branch"
    // Перед push каждой ветки она сначала создается вышеуказанной командой, затем с помощью команды push заливается
    // текущая выбранная ветка

    // Для удаления ветки используем git branch -d "name branch". Перед удалением ветки убедитесь что удаляемая ветка
    // не выбрана

    // Выполнить слияние ветки hotfix с веткой master для включения изменений в продукт. Это делается командой git merge:
    //
    //$ git checkout master
    //$ git merge hotfix
    //Updating f42c576..3a0874c
    //Fast-forward
    // index.html | 2 ++
    // 1 file changed, 2 insertions(+)

    //Заметили фразу “fast-forward” в этом слиянии? Git просто переместил указатель ветки вперед, потому что коммит C4,
    // на который указывает слитая ветка hotfix, был прямым потомком коммита C2, на котором вы находились до этого.
    // Другими словами, если коммит сливается с тем, до которого можно добраться двигаясь по истории прямо, Git упрощает
    // слияние просто перенося указатель ветки вперед, так как нет расхождений в изменениях. Это называется “fast-forward”.
}
