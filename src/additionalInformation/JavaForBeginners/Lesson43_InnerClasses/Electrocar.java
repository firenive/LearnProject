package additionalInformation.JavaForBeginners.Lesson43_InnerClasses;

public class Electrocar {
    private int id;
    private static int bat;
    public Electrocar(int id) {
        this.id = id;
    }
    public void start() {
        // методы НВК не могут вызываться из объекта базового класса и обычно используются внутри самого  базового класса
        Engine eng = new Engine();
        final int x = 1; // SomeClass имеет достук к этому полю,
        // но только если поле будет константной (недоступной для изменения)
        class SomeClass { // Вложенные классы в методе. имеет доступ к no Static Field Electrocar
            public void someMethod() { // класс применяется как альтернатива анонимному классу
                System.out.println(id);

            }
        }
        SomeClass someC = new SomeClass();
        someC.someMethod();
        eng.startEngine();
        System.out.println("Electrocar " + id + " is starting... ");
    }
    // Есть три типа вложенных классов: нестатический вложенный класс, статический вложенный класс, Вложенные классы в методе

    private class Engine { // нестатический вложенный класс. Имеет доступ к полям объекта внутри которого создается
        // нужны для разделения сложного объекта на составляющие. модификатор доступа как правило = private
        public void startEngine() {
            System.out.println("The engine " + id + " is start");
        }

    }
    // Статичекий вложенный класс. Обычно используются извне. Нужны для демонстрации взаимосвязи одного класса с другим
    public static class Battery {// не имеет доступа к нестатическим полям объекта из которого создается (Electrocar),
        public void charge() {
            System.out.println("Battery is charging" + bat); // доступ к статическому полю класса Electrocar
        }
    }
}
// Все дело в том, что при создании объекта вложенного класса внутри метода все переменные метода копируются в объект
// этого вложенного класса. То есть переменные в методе и переменные во вложенном в этот метод классе - это две разные
// переменные, которые имеют одинаковое значение.
//
//Пример:
//public void test() {
//    final int a = 5; // эта переменная
//    class SomeClass {
//        public void someMethod() {
//            a = 1; // отличается от этой переменной
//        }
//    }
//}
//
//Имея в виду такую особенность реализации вложенных классов в Java, разработчики языка решили, что возможность
// передавать во вложенные классы не константы приведет к путанице.
//
//Какого рода путаница?
//Если бы вы могли передавать во вложенные классы переменные-неконстанты, то вы бы могли изменять их внутри вложенных
// классов. Тогда, изменив переменную внутри класса, вы бы ожидали, что она изменится и в самом методе-обертке, но этого
// не произойдет потому, что в методе и во вложенном классе хранятся разные переменные.
//
//И наоборот, изменяя переменную в методе, вы бы ожидали, что она изменится во вложенном классе, но этого не произойдет.
//
//Поэтому, чтобы такой путаницы не возникало, во вложенные классы можно передавать только final переменные.